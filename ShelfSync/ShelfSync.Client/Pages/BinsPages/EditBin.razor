@page "/editBin"
@page "/editBin/{id:int}"
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]

@inject IBinService BinService
@inject ICategoryService CategoryService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider


@rendermode InteractiveAuto

@if (Id == null)
{
    <h3>Create Storage Bin</h3>
}
else
{
    <h3>Edit @storageBin.Name</h3>
}

<EditForm FormName="editstorageBin" Model="storageBin" OnValidSubmit="HandleSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="mb-3">
        <label class="form-label">Name</label>
        <InputText class="form-control" @bind-Value="storageBin.Name" />
    </div>

    <div class="mb-3">
        <label class="form-label">Description</label>
        <InputText class="form-control" @bind-Value="storageBin.Description" />
    </div>

    @* <div class="mb-3">
        <label class="form-label">Category ID</label>
        <InputNumber class="form-control" @bind-Value="storageBin.CategoryID" />
    </div> *@

    <div class="mb-3">
        <label class="form-label">Category</label>
        <InputSelect class="form-select" @bind-Value="storageBin.CategoryID">
            <option value="">-- Select Category --</option>
            @foreach (var category in categories)
            {
                <option value="@category.Id">@category.Name</option>
            }
        </InputSelect>
    </div>

    <div class="mb-3">
        <label class="form-label">Created At</label>
        <InputDate class="form-control" @bind-Value="storageBin.CreatedAt" />
    </div>

    <div class="mb-3">
        <label class="form-label">Created By</label>
        <InputText class="form-control" @bind-Value="storageBin.CreatedBy" />
    </div>

    <div class="mb-3">
        <label class="form-label">Notes</label>
        <InputTextArea class="form-control" @bind-Value="storageBin.Notes" />
    </div>

    <button type="submit" class="btn btn-primary">Submit</button>
</EditForm>



@code {
    [Parameter]
    public int? Id { get; set; }

    private List<Category> categories = new();
    private string currentUserId = string.Empty;


    @* [SupplyParameterFromForm(FormName = "editstorageBin")] *@
    StorageBin storageBin { get; set; } = new StorageBin
    {
        Name = string.Empty,
        Description = string.Empty,
        CategoryID = 1,
        CreatedAt = DateTime.UtcNow,
        CreatedBy = string.Empty,
        Notes = string.Empty,
    };

    protected override async Task OnParametersSetAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        currentUserId = authState.User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value ?? "anonymous";

        categories = await CategoryService.GetAllCategories();


        if (Id.HasValue)
        {
            var existingStorageBin = await BinService.GetStorageBinById(Id.Value);
            if (existingStorageBin != null)
                storageBin = existingStorageBin;
        }
        else
        {
            // Set CreatedBy for new bins
            storageBin.CreatedBy = currentUserId;
        }
    }


    async Task HandleSubmit()
    {
        try
        {

            if (Id.HasValue)
            {
                storageBin.Id = Id.Value;
                await BinService.UpdateStorageBin(storageBin);
            }
            else
            {
                await BinService.AddStorageBin(storageBin);
            }

            NavigationManager.NavigateTo("/bins");
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Error saving storage Bin: {ex.Message}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Unexpected error: {ex.Message}");
        }
    }
}
